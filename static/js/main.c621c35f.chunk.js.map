{"version":3,"sources":["components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","scr","monster","id","name","email","CardList","console","log","monsters","map","item","key","SearchBox","type","placeholder","onChange","changeHandler","App","e","setState","searchField","target","value","state","fetch","then","res","json","user","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAGaA,G,kBAAM,SAACC,GAGhB,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,4BAAKL,EAAMI,QAAQE,KAAnB,KACA,2BAAIN,EAAMI,QAAQG,MAAlB,QCNEC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAER,yBAAKC,UAAU,YACVD,EAAMW,SAASC,KAAI,SAAAC,GAAI,OACnB,kBAAC,EAAD,CAAMC,IAAOD,EAAKR,GAAID,QAAWS,SCNrCE,G,MAAY,SAACf,GACtB,OAEI,yBAAKC,UAAU,aACX,2BAAOe,KAAK,SACZC,YAAejB,EAAMiB,YACrBC,SAAYlB,EAAMmB,mBC+CfC,E,YAlDb,aAAc,IAAD,8BACX,+CAcFD,cAAgB,SAACE,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAQ,CACXf,SAAW,GAQXY,YAAY,IAXH,E,iFAmBO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACX,SAASoB,S,+BAM/B,IAAD,EAC0BC,KAAKN,MAA9Bf,EADD,EACCA,SAAUY,EADX,EACWA,YACXU,EAAmBtB,EAASuB,QAAO,SAAA9B,GAAO,OAC9CA,EAAQE,KAAK6B,cAAcC,SAASb,EAAYc,wBAIlD,OACE,yBAAKpC,UAAU,OAKf,gDACA,kBAAC,EAAD,CAAWgB,YAAY,iBACrBE,cAAiBa,KAAKb,gBAExB,kBAAC,EAAD,CAAUR,SAAYsB,S,GA9CVK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.c621c35f.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nexport const Card =(props)=>{\n    // console.log(props.monster.id)\n    // console.log(`https://robohash.org/${props.monster.id}?set=set2&size=180x180`)\n    return(\n        <div className='Card'>\n            <img alt='monster' scr={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n           <h2>{props.monster.name} </h2>\n           <p>{props.monster.email} </p>\n        </div>\n    )\n}","import React from 'react';\nimport './CardList.css';\nimport {Card} from '../Card/Card';\n\nexport const CardList = (props) => {\n    console.log(props)\n    return(\n        <div className='CardList'> \n            {props.monsters.map(item => \n                (<Card key = {item.id} monster = {item}/>)\n                // (<h1 key = {item.id}>{item.name}</h1>)\n            )}\n        </div>\n    )\n}","import React from 'react';\nimport './SearchBox.css';\n\nexport const SearchBox = (props) => {\n    return(\n\n        <div className='SearchBox'>\n            <input type='search'\n            placeholder = {props.placeholder}\n            onChange = {props.changeHandler}/>\n        </div>\n\n    )\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/CardList/CardList';\nimport {SearchBox} from './components/SearchBox/SearchBox';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters : [\n        // {name: 'Frankstein',\n        // id: '1'},\n        // {name: 'Dracula',\n        // id: '2'},\n        // {name: 'Zombie',\n        // id: '3'}\n      ],\n      searchField:''\n    }\n  };\n\n  changeHandler = (e) => {\n    this.setState({searchField: e.target.value})\n  };\n\n  componentDidMount(){ // call whatever inside when component rendered\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(user => this.setState({monsters:user})\n    )\n\n  };\n\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      // console.log(monster.name.toLowerCase().includes(searchField))\n    )\n\n    return (\n      <div className=\"App\">\n      {/* <input type='search' placeholder='search monster' \n      onChange = {e => this.setState({searchField:e.target.value}, ()=> console.log(this.state.searchField) ) }/> */}\n            {/* setState is asyn call, do console.log inside setstate to check updated state value */}\n\n      <h1> Monster Rolodex</h1>\n      <SearchBox placeholder='search monster' \n        changeHandler = {this.changeHandler }\n      />\n      <CardList monsters = {filteredMonsters}/>  \n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}